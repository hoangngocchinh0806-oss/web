// üéµ Ph√°t nh·∫°c sau l·∫ßn t∆∞∆°ng t√°c ƒë·∫ßu ti√™n
const music = document.getElementById('music');
document.addEventListener('click', playMusicOnce);
document.addEventListener('scroll', playMusicOnce);
document.addEventListener('touchstart', playMusicOnce);

function playMusicOnce() {
  music.play();
  document.removeEventListener('click', playMusicOnce);
  document.removeEventListener('scroll', playMusicOnce);
  document.removeEventListener('touchstart', playMusicOnce);
}

// üí¨ Danh s√°ch c√¢u h·ªèi cho Huy·ªÅn
const questions = [
  {
    text: "Huy·ªÅn c√≥ ƒëang m·ªâm c∆∞·ªùi h√¥m nay kh√¥ng? üòä",
    yes: "Tuy·ªát qu√°! N·ª• c∆∞·ªùi c·ªßa Huy·ªÅn l√†m ng√†y h√¥m nay t∆∞∆°i s√°ng h∆°n üíñ",
    no: "ƒê·ª´ng bu·ªìn nh√©! H√£y c∆∞·ªùi l√™n, Huy·ªÅn xinh nh·∫•t khi m·ªâm c∆∞·ªùi üå∏"
  },
  {
    text: "Huy·ªÅn c√≥ c·∫£m th·∫•y m√¨nh th·∫≠t ƒë·∫∑c bi·ªát kh√¥ng? üå∑",
    yes: "Ch√≠nh x√°c! Huy·ªÅn lu√¥n ƒë·∫∑c bi·ªát theo c√°ch ri√™ng c·ªßa m√¨nh ‚ú®",
    no: "Huy·ªÅn ƒë·∫∑c bi·ªát h∆°n Huy·ªÅn nghƒ© nhi·ªÅu l·∫Øm ƒë√≥ üíï"
  },
  {
    text: "Huy·ªÅn c√≥ mu·ªën nh·∫≠n th√™m l·ªùi ch√∫c t·ª´ m√¨nh kh√¥ng? üéÅ",
    yes: "Ch√∫c Huy·ªÅn m√£i h·∫°nh ph√∫c, r·∫°ng r·ª° v√† ƒë∆∞·ª£c y√™u th∆∞∆°ng th·∫≠t nhi·ªÅu! üíê",
    no: "Kh√¥ng sao, m√¨nh v·∫´n ch√∫c Huy·ªÅn m·ªôt ng√†y 20/10 th·∫≠t tuy·ªát v·ªùi nh√© üíû"
  }
];

let current = 0;
const questionText = document.getElementById('question-text');
const responseEl = document.getElementById('response');
const yesBtn = document.getElementById('yesBtn');
const noBtn = document.getElementById('noBtn');
const nextBtn = document.getElementById('nextBtn');

function showQuestion() {
  questionText.textContent = questions[current].text;
  responseEl.textContent = '';
  yesBtn.style.display = 'inline-block';
  noBtn.style.display = 'inline-block';
  nextBtn.style.display = 'none';
}

yesBtn.addEventListener('click', () => {
  responseEl.textContent = questions[current].yes;
  yesBtn.style.display = 'none';
  noBtn.style.display = 'none';
  nextBtn.style.display = 'inline-block';
});

noBtn.addEventListener('click', () => {
  responseEl.textContent = questions[current].no;
  yesBtn.style.display = 'none';
  noBtn.style.display = 'none';
  nextBtn.style.display = 'inline-block';
});

nextBtn.addEventListener('click', () => {
  current++;
  if (current < questions.length) {
    showQuestion();
  } else {
    questionText.textContent = "üíñ C·∫£m ∆°n Huy·ªÅn ƒë√£ tr·∫£ l·ªùi üíñ";
    responseEl.textContent = "Ch√∫c Huy·ªÅn m·ªôt ng√†y 20/10 th·∫≠t r·ª±c r·ª°, tr√†n ng·∫≠p ni·ªÅm vui v√† y√™u th∆∞∆°ng! üå∫";
    nextBtn.style.display = 'none';
  }
});

showQuestion();

// üéá Hi·ªáu ·ª©ng ph√°o hoa lung linh
const canvas = document.getElementById("fireworks");
const ctx = canvas.getContext("2d");

canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

let fireworks = [];

class Firework {
  constructor() {
    this.x = Math.random() * canvas.width;
    this.y = canvas.height;
    this.size = Math.random() * 3 + 2;
    this.color = `hsl(${Math.random() * 360}, 100%, 60%)`;
    this.speedY = Math.random() * 3 + 4;
    this.particles = [];
  }
  update() {
    this.y -= this.speedY;
    if (this.speedY < 0.5) this.explode();
    else this.speedY -= 0.05;
  }
  explode() {
    for (let i = 0; i < 30; i++) {
      this.particles.push(new Particle(this.x, this.y, this.color));
    }
    fireworks.splice(fireworks.indexOf(this), 1);
  }
  draw() {
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
    ctx.fillStyle = this.color;
    ctx.fill();
  }
}

class Particle {
  constructor(x, y, color) {
    this.x = x;
    this.y = y;
    this.size = Math.random() * 2;
    this.color = color;
    this.speedX = Math.random() * 6 - 3;
    this.speedY = Math.random() * 6 - 3;
    this.life = 100;
  }
  update() {
    this.x += this.speedX;
    this.y += this.speedY;
    this.life--;
  }
  draw() {
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
    ctx.fillStyle = this.color;
    ctx.fill();
  }
}

function animate() {
  ctx.fillStyle = "rgba(0,0,0,0.1)";
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  if (Math.random() < 0.05) fireworks.push(new Firework());

  fireworks.forEach(fw => {
    fw.update();
    fw.draw();
    fw.particles.forEach(p => {
      p.update();
      p.draw();
    });
  });

  requestAnimationFrame(animate);
}
animate();

// üîÅ Reload 1 l·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o nh·∫°c ch·∫°y
window.addEventListener("load", () => {
  if (!sessionStorage.getItem("reloaded")) {
    sessionStorage.setItem("reloaded", "true");
    setTimeout(() => {
      location.reload();
    }, 500); // ch·ªù 0.5 gi√¢y r·ªìi reload
  }
});
